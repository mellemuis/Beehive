/*--------------------------------------------------------------------
  This file is part of the HAN IoT shield library.

  This code is free software:
  you can redistribute it and/or modify it under the terms of a Creative
  Commons Attribution-NonCommercial 4.0 International License
  (http://creativecommons.org/licenses/by-nc/4.0/) by
  Remko Welling (https://ese.han.nl/~rwelling/) E-mail: remko.welling@han.nl

  The program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  --------------------------------------------------------------------*/

/*!
 * \file HAN_IoTShield_HWTests_v2.ino
 * \brief Sends packets on TTN using the HAN IoT Shield.
 * This sketch is made to be used as a template.
 * \author Remko Welling (remko.welling@han.nl)
 *
 * Version|Date        |Note
 * -------|------------|----
 * 1      | 17-9-2022  | First released version
 * 
 * 
 */

#include "TheThingsNetwork_HANIoT.h"
#include "HAN_IoT_Shield.h"

// Configure TTN
// =============

// Set your DevEUI, AppEUI and AppKey
const char *devEui = "0004A30B00204775";                  ///< devEUI to be generated by TTN Console
const char *appEui = "01507C8B01507C8C";                  ///< appEUI retrieve from TTN Console application
const char *appKey = "DA86377607DA4DCB0DEAFBA6C7C412BD";  ///< appKEY rtrieve from TTN Console application

#define loraSerial Serial1
#define debugSerial Serial

// Replace REPLACE_ME with TTN_FP_EU868 or TTN_FP_US915
#define freqPlan TTN_FP_EU868

TheThingsNetwork_HANIoT ttn(loraSerial, debugSerial, freqPlan);

// Configure HAN IoT Shield
// =========================
iotShieldPotmeter potmeter1(PIN_POT_RED, -20, 500);
iotShieldPotmeter potmeter2(PIN_POT_WHITE, 0, 100);

iotShieldButton redButton(PIN_SWITCH_RED);
iotShieldButton blackButton(PIN_SWITCH_BLACK);

iotShieldLED leftRedLED(PIN_LED_1_RED);
iotShieldLED rightRedLED(PIN_LED_2_RED);
iotShieldLED leftGreenLED(PIN_LED_3_GRN);
iotShieldLED rightGreenLED(PIN_LED_4_GRN);

iotShieldTempSensor temperatureSensor;

void setup()
{
  loraSerial.begin(57600);
  debugSerial.begin(9600);

  // Wait a maximum of 10s for Serial Monitor
  while (!debugSerial && millis() < 10000)
    ;

  // Send "Hello world" on leds
  helloWorld();

  debugSerial.println(F("-- STATUS"));
  ttn.showStatus();

  debugSerial.println(F("-- JOIN"));
  ttn.join(devEui, appEui, appKey);
}

void loop()
{
  debugSerial.println("-- LOOP");

  // Prepare payload of 1 byte to indicate LED status
  byte payload[1];
  payload[0] = (digitalRead(LED_BUILTIN) == HIGH) ? 1 : 0;

  // Send it off
  ttn.sendBytes(payload, sizeof(payload));

  delay(10000);
}

/// \brief present "knightrider" on leds
void helloWorld(void)
{
  leftRedLED.setState(LED_ON);
  delay(100);
  leftRedLED.setState(LED_OFF);
  leftGreenLED.setState(LED_ON);
  delay(100);
  leftGreenLED.setState(LED_OFF);
  rightRedLED.setState(LED_ON);
  delay(100);
  rightRedLED.setState(LED_OFF);
  rightGreenLED.setState(LED_ON);
  delay(100);
  rightGreenLED.setState(LED_OFF);
  rightGreenLED.setState(LED_ON);
  delay(100);
  rightGreenLED.setState(LED_OFF);
  rightRedLED.setState(LED_ON);
  delay(100);
  rightRedLED.setState(LED_OFF);
  leftGreenLED.setState(LED_ON);
  delay(100);
  leftGreenLED.setState(LED_OFF);
  leftRedLED.setState(LED_ON);
  delay(100);
  leftRedLED.setState(LED_OFF);
}
